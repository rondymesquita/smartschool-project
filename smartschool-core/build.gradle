apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "jacoco"

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-jacoco:0.2.0' }
}	
	
repositories{
	mavenCentral()
	mavenLocal()
	jcenter()
}

group "br.com.async"
version "1.0-SNAPSHOT"

dependencies{
		compile "junit:junit:4.11"
		compile 'org.mockito:mockito-all:1.8.4'
		compile 'io.github.benas:jpopulator:1.0.1'
        compile 'org.projectlombok:lombok:1.14.8'
        compile 'org.slf4j:slf4j-api:1.7.7'
        compile 'org.hibernate:hibernate-entitymanager:4.3.6.Final'
        compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
        compile 'org.springframework:spring-context:4.1.1.RELEASE'
        compile 'org.springframework:spring-core:4.1.1.RELEASE'
        compile 'org.springframework:spring-jdbc:4.1.1.RELEASE'
        compile 'org.springframework:spring-tx:4.1.1.RELEASE'
        compile 'org.springframework:spring-orm:4.1.1.RELEASE'
        compile 'org.springframework:spring-context-support:4.1.1.RELEASE'
        compile 'cglib:cglib:3.1'
//        compile fileTree(dir: 'lib', include: '*.jar')
        compile 'postgresql:postgresql:8.3-603.jdbc4'
        compile 'mysql:mysql-connector-java:5.1.6'

        compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'
        testCompile "org.mockito:mockito-core:1.+"
        testCompile 'org.powermock:powermock-api-mockito:1.6.2'
        testCompile 'org.powermock:powermock-module-junit4:1.6.2'

}

sourceSets {
    main {
      java {
        srcDir 'src/main/java'
      }
    }
  }

jar {
	   from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	}

task runDeployTests(type: Test, dependsOn: testClasses){
	include '**/*Deploy*'
}

task runDataTests(type: Test, dependsOn: testClasses){
	include '**/DataCollection'
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

jacoco {
	toolVersion = '0.6.2.201302030002'
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
test {
    jacoco {
        // would have been enabled by default
        enabled = true
    }
    include '**/domain/**'
    exclude '**/config/**'

}
import org.ajoberstar.gradle.jacoco.tasks.*

task jacocoReport(type: JacocoReport) {
    // can include one or more execution files
    executionData test

    // specify one or more source sets that you want to report on the coverage of
    sourceSets project.sourceSets.main

    // can also specify additional class and source dirs
    // additionalClassDirs moreStuff
    // additionalSourceDirs moreSourceStuff
}

