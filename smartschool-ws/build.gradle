apply plugin: "jacoco"
	
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'http://repo.spring.io/milestone/'}
    }
    dependencies {
    	classpath 'org.ajoberstar:gradle-jacoco:0.2.0'
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.5'
    }
}

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'cargo'
apply plugin: 'maven'

repositories {
   mavenCentral()
   mavenLocal()
}

dependencies {
   compile "junit:junit:4.11"
   providedCompile 'javax.servlet:servlet-api:2.5'
   compile 'org.springframework:spring-webmvc:3.2.2.RELEASE'
   compile 'org.springframework.security:spring-security-config:3.2.2.RELEASE'
   compile 'org.springframework.security:spring-security-web:3.2.2.RELEASE'
   compile 'org.springframework.security:spring-security-core:3.2.2.RELEASE'
   
   runtime 'javax.servlet:jstl:1.1.2'
   def cargoVersion = '1.4.5'
   cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
         "org.codehaus.cargo:cargo-ant:$cargoVersion"
   
   compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
   compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
   compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'
   compile 'io.github.benas:jpopulator:1.0.1'
   compile 'postgresql:postgresql:8.3-603.jdbc4'
   
   compile 'br.com.async:smartschool-core:1.0-SNAPSHOT'
   compile 'org.slf4j:slf4j-api:1.6.1'
   compile 'org.slf4j:jcl-over-slf4j:1.6.1'
   compile 'org.slf4j:slf4j-log4j12:1.6.1'
   compile 'log4j:log4j:1.2.16'
   compile 'org.projectlombok:lombok:1.14.8'

   testCompile "org.mockito:mockito-core:1.+"
   testCompile 'org.powermock:powermock-api-mockito:1.6.2'
   testCompile 'org.powermock:powermock-module-junit4:1.6.2'
   testCompile 'org.springframework:spring-test:3.2.3.RELEASE'
   testCompile "com.jayway.jsonpath:json-path:0.8.1"
   testCompile "com.jayway.jsonpath:json-path-assert:0.8.1"
   testCompile 'org.meanbean:meanbean:2.0.3'
   testCompile 'nl.jqno.equalsverifier:equalsverifier:1.7.3'
   
   
   
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compile
	exclude "**/application/**","**/repository/**"
}

task compileCore(type: Exec){
	description 'Install core as dependency'
	workingDir '../smartschool-core'
	executable 'gradle' 
	args 'install' //,'package' 
}

task runDeployTests(type: Exec){
	workingDir '../smartschool-core'
	executable 'gradle'
	args 'gradle -Dtest.single=User test'
}

//
//task downloadTomcat(type: Copy){
//	def f = new File('../apache-tomcat-7.0.55.zip')
//	def folder = new File('../apache-tomcat-7.0.55')
//	
//	if (!folder.exists()) {
//	    new URL('http://ftp.unicamp.br/pub/apache/tomcat/tomcat-7/v7.0.55/bin/apache-tomcat-7.0.55.zip').withInputStream{ i -> f.withOutputStream{ it << i }}
//	    def zipFile = file('../apache-tomcat-7.0.55.zip')
//	    def outputDir = file("../")
//	    from zipTree(zipFile)
//	    into outputDir
//	}
//	
//	doLast{
//		f.delete()
//	}
//}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}


jacoco {
	toolVersion = '0.6.2.201302030002'
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
test {
    jacoco {
        // would have been enabled by default
        enabled = true
    }
    //include '**/domain/**'
    //exclude '**/config/**'

}
import org.ajoberstar.gradle.jacoco.tasks.*

task jacocoReport(type: JacocoReport) {
    // can include one or more execution files
    executionData test

    // specify one or more source sets that you want to report on the coverage of
    sourceSets project.sourceSets.main

    // can also specify additional class and source dirs
    // additionalClassDirs moreStuff
    // additionalSourceDirs moreSourceStuff
}
